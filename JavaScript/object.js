/* JavaScriptはオブジェクト指向言語
他のオブジェクト指向言語と異なる点として、最初にクラスを用意することなくオブジェクトを利用できる。

- オブジェクトをリテラルで表現する
オブジェクトの生成方法には以下の3つがある
1：オブジェクトリテラル
2：new 演算子
3：Object.createメソッド
*/

/* 1：オブジェクトリテラル
オブジェクトはプロパティ(情報)とメソッド(動作)の集合体。
*/
let dog = {
	name: 'じょん',
	age: 10,
	show: function() {
		console.log(`私は${this.name}、${this.age}歳のすごい犬。`);
	}
};

dog.show(); // => 私はじょん、10歳のすごい犬。
// JavaScriptには厳密にはメソッドとい独立した概念はなく、値が関数オブジェクトであるプロパティがメソッドと見なされているイメージ。

/* メソッドの簡易構文(ES2015)
上記のshowの箇所はシンプルな構文に書き換えられる。
*/
let dog = {
	(略)
	show() {
		console.log(`私は${this.name}、${this.age}歳のすごい犬。`);
	}
};
// →functionキーワードが消えてすっきり。プロパティと明確に区別できる。
// →アロー関数はthisキーワードを持たないので置き換え不可

/* 変数を同名のプロパティに割り当てる
プロパティ名と、その値を格納した変数名が同じ場合には値の指定を省略できる。
*/
let name = '変数じょん';
let birth = new Date(2010, 10, 10);
let dog = { name, birth}

console.log(dog);
// => {name: 'じょん', birth: Wed Nov 10 2010 00:00:00 GMT+0900 (日本標準時)}
// →{ name: name, birth: birth}みたいに記述しなくていい！

/* プロパティ名を動的に生成する
プロパティ名をブラケットでくくることで、式の値から動的にプロパティを生成できる。
→これを算出プロパティ名という
*/
let i = 1;
let dog = {
	name: '動的じょん',
	age: 99,
	[`memo${i}`]: '犬',
	[`memo${++i}`]: 'Vim',
	[`memo${++i}`]: '最強'
};

console.log(dog);
// => {name: '動的じょん', age: 99, memo1: '犬', memo2: 'Vim', memo3: '最強'}


